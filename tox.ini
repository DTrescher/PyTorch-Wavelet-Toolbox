# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist =
    coverage-clean
    flake8
    mypy
    py
    docstr-coverage
    coverage-report

[testenv]
commands =
    coverage run -p -m pytest -m "not slow" --durations=20 {posargs:tests}
    coverage combine
    coverage xml
deps =
    coverage
    pytest

[pytest]
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')


# config for coverage
[coverage:run]
branch = True
cover_pylib = False
source =
    src/
    tests/

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

    # Don't complain about abstract methods, they aren't run:
    @(abc\.)?abstractmethod
skip_empty = true

[coverage:html]
directory = coverage_html_report
skip_covered = true
skip_empty = true


[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage src/ptwt/ tests/ setup.py --skip-private --skip-magic
description = Run the docstr-coverage tool to check documentation coverage


[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-bandit
    flake8-colors
    flake8-black
    flake8-docstrings
    flake8-import-order
    flake8-bugbear
    flake8-broken-line
    pep8-naming
    pydocstyle
    darglint
commands =
    flake8 src/ptwt/ tests/ setup.py
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:mypy]
deps = mypy
commands = mypy --install-types --non-interactive --ignore-missing-imports --strict --no-warn-return-any --implicit-reexport --allow-untyped-calls src/ptwt/
description = Run the mypy tool to check static typing on the project.

[testenv:black]
skip_install = true
deps =
    black
commands =
    black src/ptwt/ examples/ tests/ setup.py
description = Apply Black to python source code.


[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage report

[testenv:coverage-html]
deps = coverage
skip_install = true
commands =
    coverage html

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
skip_install = true
passenv = HOME
deps =
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion patch
    git push
